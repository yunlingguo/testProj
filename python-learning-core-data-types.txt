本python学习分为8部分：
1 使用入门
2 类型和运算--内置对象类型，数字，列表，字典。动态定型及引用值
3 语句和语法
4 函数
5 模块
6 类和oop
7 异常和工具
8 高级部分


1使用入门
为什么使用python
    代码质量，编程高效，平台移值、标准库支持、组件集成

python缺点：
    在现有的实现方式下，与c、c++相比，运行速度还不够快
    python代码--语句编译或转换--->字节码 ----解释器-->二进制代码

如何运行程序：命令行，双击文件图标、交互界面

模块导入：

导入模块的本质：载入另一个python文件。是python程序最大的程序结构
模块是一个不需要重复输入而可以反复运行代码的方法。

导入只发生一次。即每个程序运行不能够重复多于一次。

如需再次运行文件（不停止和重新启动会话），则需要重新reload文件，调用
imp标准库模块中可用的reload函数，reload参数为模块名称，在reload模块前
需保证reload的模块已经被导入了。

模块属性导入两种方式：将整个模块带入，引用属性；使用from module import
properties
两种方式都会运行整个文件

查看模块内部中的可用变量名列表：使用内置的dir函数

import和reload注意事项：
reload是不可传递的，即重载一个模块不能够重载该模块所导入的任何模块
使用import导入模块将不能够 执行模块所做的最新修改（交互模式下）
使用shell命令行或IDLE或点击图标的形式运行python文件则可以加载模块更新。

使用exec执行模块：如：exec(open('pythonfile').read())
每次调用exec执行模块，它都会重新运行文件。缺点：对于当前正在使用
的变量有潜在的默认覆盖的可能。

类型和运算
python程序：模块、语句、表达式、对象

python核心数据类型：
数字，字符串，列表，字典，元组，集合，文件，其他类型（type None，布尔类型），
编程单元类型（模块、函数、类）、与实现相关的类型（编译的代码堆栈跟踪）

python中没有类型声明，运行的表达式语法决定了创建使用的对象类型。
一旦创建了一个对象，它就和操作集合绑定了。
python是动态类型的（自动跟踪数据类型而不需要代码声明），也是强类型语言（
只能对一个对象进行适合该类型的有效操作）。

数字
常规类型：整型，浮点型、虚数、固定精度的十进制数、有理数、集合。
打印数字对象的两种方法：全精度（对象代码形式repr）以及用户友好的形式（print）

python还内置与数字相关模块如math以及一些高级数学工具。如random、


字符串
字符串本质是单个字符的字符串序列。序列中的元素根据相对位置进行存取。
字符串序列的开始位置从0开始
python使用变量原则：无需提前创建和声明，赋值时被创建，使用前需赋值，表达式中
变量值替换
字符串操作：位置索引、分片操作（含左不含右）
字符串合并操作（+）：操作符+多态性（不同类型+操作含义不同）。
不可变性：字符串在创建后不能就地改变。数字、字符串、元组为不可变性，字典。列表是可变的。
字符串特定的方法：find，replace，split、upper、isalpha、rstrip等
字符串的格式化高级替代： %s 或 '{0}xxx{1}'.format('','')
使用dir（obj）查看对象的可调用方法和实现细节方法。使用help(obj.method)查看方法功能
模式匹配：
python中的模式匹配使用re模块，其将会将与正则相匹配的字符串分成组
如： import re  match=re.mathch('正则表达式','{str}') match.groups()

列表：
列表是任意对象类型的位置相关的有序集合。
列表无固定大小，是可变的，能够就地更改列表对象，不会创建新列表。支持序列的所有操作。
列表常用操作有：append（尾端填），pop（尾部删），remove（从左往右，移除第一个匹配的值），
insert，reverse，sort，count，index，extend，count（统计元素出现次数）等
边界检查：如果向列表中超出位置索引处插入元素，将报错
嵌套：
python核心数据类型支持任意的嵌套。能够实现“多维数组”，矩阵等
列表解析：
处理序列和列表的方法中，python提供了一个高级操作，称列表解析表达式。
列表还包含了一些更复杂的操作，如map、filter等

字典
python中字典不是序列、而是映射。映射是其他对象的集合，通过键来存储。映射无可靠的从左至右的顺序。
字典是可变的。
字典的创建 字典的存取
重访嵌套：字典的值可以为python核心数据类型的任意类型。
对象释放：python中，当最后一次引用对象后，对象所占用的内存空间将自动清理掉
键的排序：for循环
字典的键是无序的，可以通过通过keys方法获取key的列表，然后排序后取值
新版中可以使用sorted内置函数完成，返回结果并对各种对象类型进行排序
for循环能够用于任意序列对象的遍历
迭代和优化
迭代：从左到右地扫描每个对象的工具都使用迭代协议。
迭代协议：在内存中物理存储的序列，或一个在迭代操作情况下每次产生一个元素的对象。
使用内置迭代工具或方法（如map、filter），运行性能一般比使用for循环快。
python在处理性能方面的一个主要原则：
首先为了简单和可读性去编写代码，在程序可以工作，并证明确实有不要考虑性能后，采考虑性能问题。
与性能相关的模块：time、timeit、profile。
不存在的键：if测试
获取字典不存在的键将产生错误。可以通过 in
关系表达式、if判断语句、get方法、try，has_key等来做测试
元组
元组是不可变的，不能增长或缩短，有index、count两个方法。

文件
文件创建、文件读取和写入、文件内容编码
其他文件类工具：
管道、FIFO、套接字、通过键访问文件、对象持久、基于描述符的文件，关系数据库等

其他核心类型：
集合：唯一、不可变的、无序，常用操作，add，remove、&、|、-、union、update等
十进制数、分数、布尔类型、None
type函数：获取所处理对象的类型。
比较类型的三种方法：如L=[1,2]； type（L）==type（[]）;type(L) == list ;
isinstance(L,list)
注：使用type一般用于测试，在代码中一般不这样写，因为这将破坏代码的灵活性
用户定义的类


























